// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkipAuth;

#nullable disable

namespace SkipAuth.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250312113500_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SkipAuth.Models.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file_data");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.HasKey("Id")
                        .HasName("files_pkey");

                    b.HasIndex("RequestId");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("SkipAuth.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("groups_pkey");

                    b.HasIndex(new[] { "Number" }, "groups_number_key")
                        .IsUnique();

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("SkipAuth.Models.GroupStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("group_students_pkey");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("group_students", (string)null);
                });

            modelBuilder.Entity("SkipAuth.Models.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateOnly>("DateEnd")
                        .HasColumnType("date")
                        .HasColumnName("date_end");

                    b.Property<DateOnly>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("date_start");

                    b.Property<bool?>("FileInDean")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("file_in_dean");

                    b.Property<Guid?>("ModeratorId")
                        .HasColumnType("uuid")
                        .HasColumnName("moderator_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'PENDING'::character varying");

                    b.HasKey("Id")
                        .HasName("requests_pkey");

                    b.HasIndex("CreatorId");

                    b.ToTable("requests", (string)null);
                });

            modelBuilder.Entity("SkipAuth.Models.Token", b =>
                {
                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expire_at");

                    b.Property<string>("Token1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasIndex("UserId");

                    b.ToTable("tokens", (string)null);
                });

            modelBuilder.Entity("SkipAuth.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role")
                        .HasDefaultValueSql("'STUDENT'::character varying");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SkipAuth.Models.FileEntity", b =>
                {
                    b.HasOne("SkipAuth.Models.Request", "Request")
                        .WithMany("Files")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("files_request_id_fkey");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SkipAuth.Models.GroupStudent", b =>
                {
                    b.HasOne("SkipAuth.Models.Group", "Group")
                        .WithMany("GroupStudents")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_students_group_id_fkey");

                    b.HasOne("SkipAuth.Models.User", "Student")
                        .WithMany("GroupStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_students_student_id_fkey");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SkipAuth.Models.Request", b =>
                {
                    b.HasOne("SkipAuth.Models.User", "Creator")
                        .WithMany("Requests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("requests_creator_id_fkey");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SkipAuth.Models.Token", b =>
                {
                    b.HasOne("SkipAuth.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("tokens_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkipAuth.Models.Group", b =>
                {
                    b.Navigation("GroupStudents");
                });

            modelBuilder.Entity("SkipAuth.Models.Request", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("SkipAuth.Models.User", b =>
                {
                    b.Navigation("GroupStudents");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
